{"version":3,"file":"static/webpack/static/development/pages/index.js.4648f1367085b2bbc12e.hot-update.js","sources":["webpack:///./components/MainFrame.js"],"sourcesContent":["import React from 'react'\nimport Container from '@material-ui/core/Container';\nimport styled from 'styled-components';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Tracks from './Tracks'\nimport Playlist from './Playlist'\nimport PlaylistSelector from './PlaylistSelector'\nconst useStyles = makeStyles(theme => ({\n  typography: {\n    padding: theme.spacing(2),\n  },\n}));\n\n\nasync function getSpotifyProfile(token){\n    const apiUrlOne = 'https://api.spotify.com/v1/me'\n    const response = await fetch(apiUrlOne, {\n        method: 'GET',\n        mode: 'cors', \n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      const profileObject = await response.json();\n      return profileObject\n}\n\nasync function addUserLibrary(token,limit){\n    const apiURL = \"https://api.spotify.com/v1/me/tracks?limit=\"+limit\n    const response = await fetch(apiURL, {\n        method: 'GET',\n        mode: 'cors', \n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n     const libraryObject = await response.json();\n     return libraryObject\n}\n\nasync function addUserTopTracks(token, limit){\n    const apiURL = \"https://api.spotify.com/v1/me/top/tracks?limit=\"+limit\n    const response = await fetch(apiURL, {\n        method: 'GET',\n        mode: 'cors', \n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n     const libraryObject = await response.json();\n     return libraryObject\n}\n\n\nasync function addLibraryFeatures(token, tracks){\n  var arrayOfTracks = []\n  tracks.forEach(element => {\n    arrayOfTracks.push(element.id)\n  });\n  tracks = arrayOfTracks.toString()\n  const apiURL = \"https://api.spotify.com/v1/audio-features/?ids=\"+tracks\n  const response = await fetch(apiURL, {\n      method: 'GET',\n      mode: 'cors', \n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n   const libraryObject = await response.json();\n\n   return libraryObject\n}\n\n\nvar generateReady = false;\nvar totalTime = 0;\n\nclass MainFrame extends React.Component {\n    constructor(props){\n     super(props)\n        this.state = {importedLibrary:false, importedTop:false, imported:[], features:[], generateReady:false, totalTime:0, renderTable: true, pickPlaylist: false, open:false, setOpen: false, featuresGenerated:false,user_id:\"null\"}\n      }\n    componentDidMount(){\n      getSpotifyProfile(this.props.token).then((value)=>{this.setState({user_id:value.id})})\n    }\n\n    handleOpen(){\n      this.setState({open:true})\n    }\n    handleClose(){\n      this.setState({open:false})\n    }\n    \n    handleLibraryImport(){\n      addUserLibrary(this.props.token,10).then((librarySongs)=>{\n          const trackArray = librarySongs.items.map(function (obj) {\n            return obj.track;\n          });\n          this.setState(prevState => ({\n            imported: [...prevState.imported,...trackArray]\n          }))\n        })\n        this.setState({importedLibrary: true})\n      }\n\n    handleTopImport(){\n     addUserTopTracks(this.props.token,10).then((topTracks)=>{\n        this.setState(prevState => ({\n          imported: [...prevState.imported,...topTracks.items]\n        }))\n     })\n     this.setState({importedTop: true})\n    }\n\n    checkTrackSize = (dataFromChild)=>{\n      if(dataFromChild >= 60 && this.state.generateReady == false){\n        console.log(\"Generate ready!\" + dataFromChild)\n        this.setState({generateReady:true})\n        totalTime = dataFromChild\n      }\n    }\n    handleGenerate(){\n      addLibraryFeatures(this.props.token, this.state.imported).then((features)=>{\n        let importedSong = this.state.imported\n        var count =  0;\n        importedSong.forEach(element => {\n          element.feature = features.audio_features[count];\n          count = count + 1;\n        });\n        this.setState({imported:importedSong,renderTable:false, pickPlaylist: true, generateReady: false, featuresGenerated:true})\n    })\n  }\n\n\n\n\n    render(){\n        return( \n            <Container  maxWidth=\"lg\" style={{padding: \"5%\"}}>\n                <Paper style={{margin:\"5%\", padding:\"5%\", height: '100%', backgroundImage:'linear-gradient(60deg, #29323c 0%, #485563 100%)',  display: 'grid',}}> \n                <Grid container spacing={5}>\n                <Grid item xs>\n                  <Button  disabled={this.state.importedLibrary} variant=\"contained\" size=\"large\"   onClick={()=>(this.handleLibraryImport())}> Import Saved Tracks </Button>\n                </Grid>\n                  <Grid item xs>\n                  <Button disabled={this.state.importedTop} variant=\"contained\" size=\"large\"  onClick={()=>(this.handleTopImport())} > Import Library Tracks </Button>\n                 </Grid>\n                 <Grid item xs>\n                   <Button  disabled={!this.state.generateReady} variant=\"contained\" size=\"large\"  onClick={()=>(this.handleGenerate())} > Generate Features </Button>\n                  </Grid>\n                  <Grid item xs>\n                    <PlaylistSelector token={this.props.token} user_id={this.state.user_id} featuresGenerated={!this.state.featuresGenerated} importedSong={this.state.imported}/> \n                  </Grid>\n                 <Grid item xs={12}>\n                  {(this.state.renderTable) ? <Tracks generateReady={this.checkTrackSize} tracksImported={this.state.importedLibrary || this.state.importedTop} allTracks={this.state.imported}/> : <Playlist allTracks={this.state.imported}/> }\n                 </Grid>\n                </Grid>\n                </Paper>\n            </Container>\n        )\n    }\n\n\n\n}\n export  default MainFrame;"],"mappings":"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","sourceRoot":""}